<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>英語独り言トレーナー</title>
  <style>
    body {
      font-family: sans-serif;
      background: #f5f5f5;
      margin: 0;
      padding: 20px;
    }
    .category {
      background: #fff;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    h2 {
      margin-top: 0;
    }
    .phrase {
      margin-bottom: 25px;
      border-bottom: 1px solid #ccc;
      padding-bottom: 15px;
    }
    /* ここでは「.english」の部分が非表示となる */
    .english {
      display: none;
      margin-top: 5px;
      color: #444;
    }
    .controls button, .controls input[type=range] {
      margin: 5px 10px 5px 0;
    }
    .responsive {
      max-width: 800px;
      margin: auto;
    }
    audio {
      display: block;
      margin-top: 10px;
    }
    .score {
      color: green;
      font-weight: bold;
    }
    @media (max-width: 600px) {
      body {
        padding: 10px;
      }
      .controls button,
      .controls input[type=range] {
        width: 100%;
        margin: 5px 0;
      }
    }
  </style>
</head>
<body>
<div class="responsive">
  <h1>英語独り言トレーナー</h1>

  <label for="rate">スピード: <span id="rate-value">1</span>x</label>
  <input type="range" min="0.3" max="1" step="0.1" value="1" id="rate" onchange="updateRate()">

  <div id="app"></div>
</div>

<script>
const phrases = {
  '家で使う日常会話': [
    { en: "I wonder what’s on TV now.", ja: "今テレビ何やってるかな？" },
    { en: "What should I eat for dinner today?", ja: "今日の夕飯何食べようかな？" },
    { en: "There’s a cup on the desk.", ja: "机の上にコップがある。" },
    { en: "Can you make some tea?", ja: "お茶作って？" },
    { en: "I need to do the laundry.", ja: "洗濯しなきゃ。" },
    { en: "Let’s clean the room.", ja: "部屋を掃除しよう。" },
    { en: "Where did I put my phone?", ja: "スマホどこに置いたっけ？" },
    { en: "The bath is ready.", ja: "お風呂沸いたよ。" },
    { en: "Dinner is ready.", ja: "ご飯できたよ。" },
    { en: "I want to relax now.", ja: "今はゆっくりしたいな。" },
    { en: "Let’s watch a movie.", ja: "映画見ようか。" },
    { en: "I’m going to bed.", ja: "寝るね。" },
    { en: "Good night.", ja: "おやすみ。" },
    { en: "Let’s open the window.", ja: "窓開けよう。" },
    { en: "It’s cold today.", ja: "今日は寒いな。" },
    { en: "It’s hot today.", ja: "今日は暑いね。" },
    { en: "I’ll make some coffee.", ja: "コーヒー淹れるね。" },
    { en: "Let’s have breakfast.", ja: "朝ごはん食べよう。" },
    { en: "I’m hungry.", ja: "お腹すいた。" },
    { en: "I’m full.", ja: "お腹いっぱい。" },
    { en: "Let’s go shopping.", ja: "買い物行こう。" },
    { en: "We’re out of milk.", ja: "牛乳切らしてるよ。" },
    { en: "Do you need anything?", ja: "何かいる？" },
    { en: "Let’s make a shopping list.", ja: "買い物リスト作ろう。" },
    { en: "I’ll do the dishes.", ja: "皿洗うね。" },
    { en: "The trash is full.", ja: "ゴミがいっぱいだ。" },
    { en: "Take out the trash.", ja: "ゴミ出して。" },
    { en: "Let’s vacuum the floor.", ja: "床を掃除機かけよう。" },
    { en: "I spilled some water.", ja: "水こぼしちゃった。" },
    { en: "Where’s the towel?", ja: "タオルどこ？" },
    { en: "Let’s change the sheets.", ja: "シーツ替えよう。" },
    { en: "I’m going to take a shower.", ja: "シャワー浴びてくるね。" },
    { en: "Close the curtains.", ja: "カーテン閉めて。" },
    { en: "Let’s turn off the lights.", ja: "電気消そう。" },
    { en: "It’s noisy outside.", ja: "外がうるさいな。" },
    { en: "Let’s take a break.", ja: "休憩しよう。" },
    { en: "I’m tired.", ja: "疲れたな。" },
    { en: "Let’s play some music.", ja: "音楽流そうか。" },
    { en: "Let’s read a book.", ja: "本読もう。" },
    { en: "Where’s the remote?", ja: "リモコンどこ？" },
    { en: "Let’s set the alarm.", ja: "アラームセットしよう。" },
    { en: "I need to charge my phone.", ja: "スマホ充電しなきゃ。" },
    { en: "Let’s plan for tomorrow.", ja: "明日の予定立てよう。" },
    { en: "I’ll write in my journal.", ja: "日記書こう。" },
    { en: "Let’s do some stretching.", ja: "ストレッチしよう。" },
    { en: "It’s already midnight.", ja: "もう夜中だ。" },
    { en: "Time to sleep.", ja: "寝る時間だね。" },
  ],
  '家で使う日常会話2': [
    { en: "I wonder what's on TV.", ja: "テレビ何やってるかな？" },
    { en: "What should I eat for dinner today?", ja: "今日の夕飯何食べようかな？" },
    { en: "There’s a cup on the desk.", ja: "机の上にコップがある。" },
    { en: "I’m gonna have some coffee.", ja: "コーヒー飲もうと。" },
    { en: "Maybe I’ll make some coffee.", ja: "コーヒーでも作ろうかな？" },
    { en: "Maybe I’ll play the guitar.", ja: "ギターでも弾こうかな。" },
    { en: "Can you do the dishes?", ja: "食器洗って?" },
    { en: "I’ll do the dishes.", ja: "食器洗おうっと。" },
    { en: "I’m gonna watch YouTube.", ja: "ユーチューブ見ようと。" },
    { en: "This show is fun.", ja: "この番組面白い。" },
    { en: "This YouTube channel is fun.", ja: "このYouTubeチャンネル面白い。" },
    { en: "This YouTube channel is boring.", ja: "このYouTubeチャンネルつまんない。" },
    { en: "I can't find the YouTube channel I was gonna watch.", ja: "見ようとしてたYouTubeチャンネルが見つからない。" },
    { en: "Make some tea, please.", ja: "あなたお茶作ってや。" },
    { en: "I’ll make some tea.", ja: "お茶作ろうっと。" },
    { en: "I have work tomorrow...", ja: "明日は仕事かぁ。" },
    { en: "Finally, a day off tomorrow!", ja: "明日やっと仕事休みだ。" },
    { en: "This drink is so good!", ja: "このお酒美味い！" },
    { en: "This food is really good!", ja: "この料理美味い！" },
    { en: "I’m super sleepy.", ja: "めっちゃ眠たい。" },
    { en: "Maybe I’ll take a nap.", ja: "昼寝しようかな？" },
    { en: "I want to eat Chinese food.", ja: "中華料理食べたい。" },
    { en: "I want to eat udon.", ja: "うどん食べたい。" },
    { en: "I feel like having sushi for a change.", ja: "たまには寿司食べたいなぁ。" },
    { en: "I’ll do the laundry.", ja: "洗濯しよっと。" },
    { en: "I'm too lazy to do laundry.", ja: "洗濯するのめんどくさい。" },
    { en: "I’ll clean the room.", ja: "掃除しよ。" },
    { en: "I'm too lazy to clean right now.", ja: "掃除するのめんどくさい。" },
    { en: "I’ll brush my teeth.", ja: "歯磨きしよ。" },
    { en: "I’ll take a bath.", ja: "お風呂入ろ。" },
    { en: "I feel fresh after the bath.", ja: "お風呂入ってすっきりした。" },
    { en: "I’ll shave.", ja: "ヒゲ剃ろう。" },
    { en: "I need to shave.", ja: "ヒゲ剃らないと。" },
    { en: "It’s less than 20 degrees today.", ja: "今日はの気温は20度ないなぁ。" },
    { en: "It’s 23 degrees today.", ja: "今日の気温は２３度だ。" },
    { en: "What’s the temperature now?", ja: "今、気温何度？" },
    { en: "What’s the weather like today?", ja: "今日の天気は？" },
    { en: "I hope it stays sunny all day.", ja: "今日、一日晴れたらいいなぁ。" },
    { en: "It’s sunny today.", ja: "今日は晴れだ。" },
    { en: "The sun came out.", ja: "晴れてきた。" },
    { en: "Nice weather.", ja: "いい天気だ。" },
    { en: "It’s cloudy now.", ja: "今曇りだ。" },
    { en: "It’s cloudy today.", ja: "今日は曇りだ。" },
    { en: "It’s raining now.", ja: "今雨降ってる。" },
    { en: "It’s rainy today.", ja: "今日は雨だ。" },
    { en: "It’s raining hard.", ja: "めっちゃ雨降ってる。" },
    { en: "It’s drizzling a bit.", ja: "パラっと雨降ってる。" },
    { en: "It’s snowing now. That doesn’t happen often.", ja: "今珍しく雪降ってる。" },
  ],
};

let currentRate = 1;
let mediaRecorder;
let recordings = {};
let currentStream = null;
let preferredVoice = null;

function updateRate() {
  const rateSlider = document.getElementById('rate');
  currentRate = parseFloat(rateSlider.value);
  document.getElementById('rate-value').textContent = currentRate;
  document.querySelectorAll('input[type=range][id^=rate-]').forEach(slider => {
    slider.value = currentRate;
    const label = slider.previousElementSibling.querySelector('span');
    if (label) label.textContent = currentRate;
  });
}

function speak(text, rate = currentRate) {
  speechSynthesis.cancel();
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = 'en-US';
  utterance.rate = rate;
  utterance.pitch = 1.0;
  utterance.voice = preferredVoice || speechSynthesis.getVoices().find(v => v.lang === 'en-US' && /Google US English/i.test(v.name));
  speechSynthesis.speak(utterance);
}

// toggleTranslationは英文（クラス名: "english"）の表示/非表示を切り替えます
function toggleTranslation(button) {
  const p = button.parentElement.querySelector('.english');
  p.style.display = p.style.display === 'block' ? 'none' : 'block';
}

async function startRecording(key) {
  try {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop();
    if (currentStream) currentStream.getTracks().forEach(track => track.stop());

    currentStream = await navigator.mediaDevices.getUserMedia({ audio: true });

    const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') ? 'audio/webm;codecs=opus' :
                     (MediaRecorder.isTypeSupported('audio/mp4') ? 'audio/mp4' : '');

    mediaRecorder = new MediaRecorder(currentStream, mimeType ? { mimeType } : undefined);

    recordings[key] = [];
    mediaRecorder.ondataavailable = e => recordings[key].push(e.data);
    mediaRecorder.onstop = () => {
      const blob = new Blob(recordings[key], { type: 'audio/webm' });
      const url = URL.createObjectURL(blob);
      document.getElementById(`audio-${key}`).src = url;
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
        currentStream = null;
      }
      sendToTranscriptionServer(key);
    };
    mediaRecorder.start();
  } catch (e) {
    alert("録音に失敗しました。\n\n【対処法】\n・iPhoneをご使用の場合、Safariを使ってください。\n・マイクの使用を許可してください（設定 > Safari > マイク）\n\nエラー内容: " + e.message);
  }
}

function stopRecording(key) {
  if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop();
}

function checkPronunciationAI(text, key) {
  const scoreDiv = document.getElementById(`score-${key}`);
  const isIOS = /iP(hone|od|ad)/.test(navigator.userAgent) && !window.MSStream;
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

  if (isIOS && isSafari) {
    scoreDiv.innerHTML += `<div style="color: red;">iPhone SafariではAI発音チェック機能は利用できません。</div><hr>`;
    return;
  }

  if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
    alert('このブラウザでは音声認識がサポートされていません。');
    return;
  }

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();
  recognition.lang = 'en-US';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  scoreDiv.innerHTML += `<div>🎤 話してください...（AI評価中）</div>`;

  recognition.onresult = (event) => {
    const spokenText = event.results[0][0].transcript.trim().toLowerCase();
    const targetText = text.trim().toLowerCase();
    const spokenWords = spokenText.split(' ');
    const targetWords = targetText.split(' ');
    const results = targetWords.map(word => ({
      word,
      correct: spokenWords.includes(word)
    }));
    const correctCount = results.filter(r => r.correct).length;
    const score = Math.round((correctCount / targetWords.length) * 100);
    const resultHtml = results.map(r =>
      `<span style="color:${r.correct ? 'green' : 'red'}">${r.word}</span>`
    ).join(' ');
    scoreDiv.innerHTML += `<div>AI評価: ${score}/100<br>結果: ${resultHtml}</div><hr>`;
  };

  recognition.onerror = (event) => {
    scoreDiv.innerHTML += `<div style="color:red">音声認識エラー: ${event.error}</div>`;
  };

  recognition.onend = () => {
    console.log('Recognition ended');
  };

  setTimeout(() => recognition.start(), 200);
}

function createUI() {
  const app = document.getElementById('app');
  for (const category in phrases) {
    const div = document.createElement('div');
    div.className = 'category';
    const h2 = document.createElement('h2');
    h2.textContent = category;
    div.appendChild(h2);

    phrases[category].forEach((phrase, index) => {
      const id = `${category}-${index}`.replace(/\s+/g, '-');
      const phraseDiv = document.createElement('div');
      phraseDiv.className = 'phrase';
      // 表示順序を入れ替え：先に日本語文（常時表示）、次に英文（初期は非表示）
      phraseDiv.innerHTML = `
        <p><strong>${index + 1}. ${phrase.ja}</strong></p>
        <button onclick="toggleTranslation(this)">英文表示/非表示</button>
        <p class="english">${phrase.en}</p>
        <div class="controls">
          <button onclick="speak('${phrase.en.replace(/'/g, "\\'")}', currentRate)">発音再生</button>
          <label for="rate-${id}">速度: <span>${currentRate}</span>x</label>
          <input type="range" id="rate-${id}" min="0.3" max="1" step="0.1" value="${currentRate}" onchange="
            currentRate = parseFloat(this.value); 
            this.previousElementSibling.querySelector('span').textContent = this.value;
            document.getElementById('rate').value = this.value;
            document.getElementById('rate-value').textContent = this.value;
          ">
          <button onclick="startRecording('${id}')">録音開始</button>
          <button onclick="stopRecording('${id}')">録音終了</button>
          <audio id="audio-${id}" controls></audio>
          <button onclick="checkPronunciationAI('${phrase.en.replace(/'/g, "\\'")}', '${id}')">発音チェック（AI）</button>
          <div class="score" id="score-${id}"></div>
        </div>
      `;
      // 英文は初期状態で非表示に設定
      phraseDiv.querySelector('.english').style.display = 'none';
      div.appendChild(phraseDiv);
    });
    app.appendChild(div);
  }
}

function waitForVoicesThenCreateUI() {
  const voices = speechSynthesis.getVoices();
  if (voices.length) {
    preferredVoice = voices.find(v => /Google US English|Samantha|en-US/i.test(v.name))
                   || voices.find(v => v.lang === "en-US");
    createUI();
  } else {
    setTimeout(waitForVoicesThenCreateUI, 200);
  }
}

waitForVoicesThenCreateUI();
</script>

<script>
  async function sendToTranscriptionServer(key) {
    const audioBlob = new Blob(recordings[key], { type: 'audio/webm' });
    const formData = new FormData();
    formData.append("audio", audioBlob, "recording.webm");

    try {
      const response = await fetch("https://english-trainer.yourname.repl.co/transcribe", {
        method: "POST",
        body: formData
      });

      const data = await response.json();
      if (data.text) {
        document.getElementById(`score-${key}`).innerHTML += `<div>Whisper認識: ${data.text}</div>`;
      } else if (data.error) {
        alert("サーバーエラー: " + data.error);
      }
    } catch (err) {
      alert("通信に失敗しました: " + err.message);
    }
  }
</script>
</body>
</html>
